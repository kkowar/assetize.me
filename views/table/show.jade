extends ../layout
include _m_table_rows

block content
  #layerTable.col-xs-12(style="padding-top: 50px; padding-left: 0px; padding-right: 0px;")
    .tableWrapper(id="fcID_#{fcID}")
      table#sourceTable.table.tableScroll
        thead.tableFixedHeader
          tr
            - each header, index in layerTableHeaders
              th(class="th_#{index}")
                span.dropdown
                  span.dropdown-toggle(id="dropdown_menu_#{fcID}_#{index}" data-toggle="dropdown")
                    = header
                    &nbsp;
                    span.caret
                  ul.dropdown-menu(role="menu" aria-labelledby="dropdown_menu_#{fcID}_#{index}")
                    li.disabled(role="presentation")
                      a(role="menuitem" tabindex="-1" href="#" data-target="order_#{fcID}_#{index}")
                        span
                          | Order
                        &nbsp;
                        span.badge(style="font-weight: normal; font-size: .8em;position: relative; top: -1px;")
                          | ASC
                        &nbsp;
                        span.badge(style="font-weight: normal; font-size: .8em;position: relative; top: -1px;")
                          | DESC
                    li(role="presentation")
                      a(role="menuitem" tabindex="-1" href="#" data-target="rename_#{fcID}_#{index}")
                        | Rename column...
                    li.disabled(role="presentation")
                      a(role="menuitem" tabindex="-1" href="#" data-target="change_#{fcID}_#{index}")
                        | Change data type...
                    li.disabled(role="presentation")
                      a(role="menuitem" tabindex="-1" href="#" data-target="add_#{fcID}_#{index}")
                        | Add a new column...
                    li.disabled(role="presentation")
                      a(role="menuitem" tabindex="-1" href="#" data-target="filter_#{fcID}_#{index}")
                        | Filter by this column...
                    li(role="presentation" class="divider")
                    li(role="presentation")
                      a(role="menuitem" tabindex="-1" href="" data-target="delete_#{fcID}_#{index}" style="color: #ff0000;")
                        | Delete Column

        tbody.tableScrollContent
          +table_rows(layerTableRows)

  script.
    var gScrollX;
    var gScrollY;
    var gCurrentPage = 1;
    var gInfiniteTrigger;

    $( document ).ready(function() {
      
      $('.dropdown-toggle').dropdown();
      $('a[role=menuitem]').click(function(e) {
        e.preventDefault();
        var arrDataTarget = $(e.currentTarget).attr("data-target").split("_");
        var action = arrDataTarget[0];        
        var fcID = arrDataTarget[1];
        var fcFieldIndex = arrDataTarget[2];
        console.log([action,fcID,fcFieldIndex]);
        if (action === "delete") {deleteField(fcFieldIndex,fcID)};
        //- if (action === "rename") {renameField(fcFieldIndex,fcID)};
      })

      $.fn.isOnScreen = function(){

        var win = $(window);

        var viewport = {
            top : win.scrollTop(),
            left : win.scrollLeft()
        };
        viewport.right = viewport.left + win.width();
        viewport.bottom = viewport.top + win.height();

        var bounds = this.offset();
        bounds.right = bounds.left + this.outerWidth();
        bounds.bottom = bounds.top + this.outerHeight();

        return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

      };
      
      $("tbody").scroll(function(){
        // var actual_scroll_position = { x:$("tbody").scrollLeft(), y:$("tbody").scrollTop() };
        var totalRecords = gCurrentPage * 50;
        var tbody = $("table tbody");
        var tbodyChildren = tbody.children();
        var triggerVisible = tbodyChildren.last().isOnScreen();
        if (tbodyChildren.length === totalRecords) {
          gInfiniteTrigger = true;
        };
        if (triggerVisible && gInfiniteTrigger) {
          gInfiniteTrigger = false;
          gScrollX = tbody.scrollLeft();
          gScrollY = tbody.scrollTop();
          appendNewRows();
        };
      });
    
      setTableDimensions();
      appendNewRows();
      
    });
    
    var setTableDimensions = function() {
      // Setup the table dimensions.
    
      // Set the tbody height.
      var tableHeight = (window.innerHeight - 50 - 20) + "px";
      var tbodyHeight = (window.innerHeight - Number($("#sourceTable thead").css("height").replace("px","")) - 50 - 20) + "px";
      $("#sourceTable").css({height: tableHeight});
      $("#sourceTable tbody").css({height: tbodyHeight});
    
      // Figure out and set minimum column widths.
      var $sourceTH = $("#sourceTable thead tr:first-child").children();
      var $sourceTD = $("#sourceTable tbody tr:first-child").children();
      var maxWidthsTH = [];
      var maxWidthsTD = [];
      var maxWidths = [];
      var totWidth = 0;

      // Iterate over TH to get all TH widths.
      _.each($sourceTH, function (th,i) {
        var width = $(th).css("width");
        maxWidthsTH.push(Number(width.replace("px","")));
      });
      // console.log(maxWidthsTH);
      _.each($sourceTD, function (td,i) {
        var width = $(td).css("width");
        maxWidthsTD.push(Number(width.replace("px","")));
      });
      // console.log(maxWidthsTD);
      _.each(maxWidthsTH, function (thWidth,i) {
        maxWidths.push((maxWidthsTD[i] > thWidth) ? maxWidthsTD[i] : thWidth);
      });
      // console.log(maxWidths);
      // Set a Default width for the fID column.
      maxWidths[0] = 100;
      _.each(maxWidths, function(width,i) {
        $("#sourceTable tbody tr:first-child td:nth-child(" + (i+1) + ")").css({width: width});
        $("#sourceTable thead tr:first-child th:nth-child(" + (i+1) + ")").css({width: width});
        totWidth = totWidth + width;
      });
      // console.log(totWidth);
      $("#sourceTable").css({width: totWidth});
    
      // $("tbody").scrollLeft(Session.get("scrollX"));
      // $("tbody").scrollTop(Session.get("scrollY"));
    
    };
    
    var appendNewRows = function () {
      var fcID = $(".tableWrapper").attr("id").split("_")[1];
      var perPage = 50;
      var nextPage = gCurrentPage + 1;
      var skip = gCurrentPage * perPage;
      var limit = perPage * gCurrentPage;
      // console.log(timeStamp() + " -> fcID: " + fcID + ", currentPage: " + gCurrentPage + ", perPage: " + perPage + ", limit: " + limit + ", skip: " + skip);
      // return colFeatures.find({},{limit: perPage, skip: skip * perPage, sort:{fid: -1}});
      // ?fcID=" + fcID + "&limit=" + perPage + "&skip=" + skip
      // , "properties.TypeAbbr": "PVC"
      $.ajax({url: "/feature", data: {where: {"fcID": fcID}, limit: perPage, skip: skip}}).done(function(data){
        var html = "";
        _.each(data,function(row){
          html = html + "<tr>";
          html = html + "<td>" + row.fID + "</td>";
          _.each(row.properties,function(property){
              html = html + "<td>" + property + "</td>";
          });
          html = html + "</tr>";
        });
        $("tbody.tableScrollContent").append(html);
        setTableDimensions();
      });
      gCurrentPage = nextPage;
    };

    var deleteField = function (fieldIndex,fcID) {
      //- var spinner = new Spinner().spin();
      //- $("tbody").prepend(spinner.el);
      //- $("body").append(spinner.el);
      //- console.log("Field Deleted!");
      //- console.log("TODO: Show Verification Modal!");
      //- data: {action: "column", value: fieldIndex, fcID: fcID}, method: "DELETE"
      $.ajax({url: "/table?action=column&value=" + fieldIndex + "&fcID=" + fcID, method: "DELETE"}).done(function(data){
        console.log(data);
        //- $(".th_" + fieldIndex).remove();
        //- $(".td_" + fieldIndex).remove();
        window.location.replace("/table/" + fcID);
        spinner.stop();
      });
    };



